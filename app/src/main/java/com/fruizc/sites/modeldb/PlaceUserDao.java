package com.fruizc.sites.modeldb;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLACE_USER".
*/
public class PlaceUserDao extends AbstractDao<PlaceUser, Void> {

    public static final String TABLENAME = "PLACE_USER";

    /**
     * Properties of entity PlaceUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IdPlace = new Property(0, Long.class, "idPlace", false, "ID_PLACE");
        public final static Property Useremail = new Property(1, String.class, "useremail", false, "USEREMAIL");
    }


    public PlaceUserDao(DaoConfig config) {
        super(config);
    }
    
    public PlaceUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLACE_USER\" (" + //
                "\"ID_PLACE\" INTEGER," + // 0: idPlace
                "\"USEREMAIL\" TEXT);"); // 1: useremail
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLACE_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PlaceUser entity) {
        stmt.clearBindings();
 
        Long idPlace = entity.getIdPlace();
        if (idPlace != null) {
            stmt.bindLong(1, idPlace);
        }
 
        String useremail = entity.getUseremail();
        if (useremail != null) {
            stmt.bindString(2, useremail);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PlaceUser entity) {
        stmt.clearBindings();
 
        Long idPlace = entity.getIdPlace();
        if (idPlace != null) {
            stmt.bindLong(1, idPlace);
        }
 
        String useremail = entity.getUseremail();
        if (useremail != null) {
            stmt.bindString(2, useremail);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public PlaceUser readEntity(Cursor cursor, int offset) {
        PlaceUser entity = new PlaceUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idPlace
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // useremail
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PlaceUser entity, int offset) {
        entity.setIdPlace(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUseremail(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(PlaceUser entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(PlaceUser entity) {
        return null;
    }

    @Override
    public boolean hasKey(PlaceUser entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
